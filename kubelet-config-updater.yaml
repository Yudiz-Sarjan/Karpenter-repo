apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kubelet-config-updater
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: kubelet-config-updater
  template:
    metadata:
      labels:
        app: kubelet-config-updater
    spec:
      containers:
      - name: kubelet-config-updater
        image: alpine:latest  # Use a more reliable base image
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo '{
            "kind": "KubeletConfiguration",
            "apiVersion": "kubelet.config.k8s.io/v1beta1",
            "address": "0.0.0.0",
            "authentication": {
              "anonymous": {
                "enabled": false
              },
              "webhook": {
                "cacheTTL": "2m0s",
                "enabled": true
              },
              "x509": {
                "clientCAFile": "/etc/kubernetes/pki/ca.crt"
              }
            },
            "authorization": {
              "mode": "Webhook",
              "webhook": {
                "cacheAuthorizedTTL": "5m0s",
                "cacheUnauthorizedTTL": "30s"
              }
            },
            "clusterDomain": "cluster.local",
            "hairpinMode": "hairpin-veth",
            "readOnlyPort": 0,
            "cgroupDriver": "systemd",
            "cgroupRoot": "/",
            "featureGates": {
              "RotateKubeletServerCertificate": true
            },
            "protectKernelDefaults": true,
            "serializeImagePulls": false,
            "serverTLSBootstrap": true,
            "tlsCipherSuites": [
              "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
              "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
              "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305",
              "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
              "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305",
              "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
              "TLS_RSA_WITH_AES_256_GCM_SHA384",
              "TLS_RSA_WITH_AES_128_GCM_SHA256"
            ],
            "clusterDNS": [
              "10.100.0.10"
            ],
            "evictionHard": {
              "memory.available": "200Mi",
              "nodefs.available": "10%",
              "nodefs.inodesFree": "5%"
            },
            "kubeReserved": {
              "cpu": "80m",
              "ephemeral-storage": "1Gi",
              "memory": "893Mi"
            },
            "evictionMaxPodGracePeriod": 60,
            "imageGCHighThresholdPercent": 85,
            "imageGCLowThresholdPercent": 75,
            "providerID": "aws:///us-east-2c/i-09342fe6aa1715f51",
            "systemReservedCgroup": "/system",
            "kubeReservedCgroup": "/runtime"
          }' > /etc/kubernetes/kubelet/kubelet-config.json;
          tail -f /dev/null  # Keep the container running
        volumeMounts:
        - name: kubelet-config
          mountPath: /etc/kubernetes/kubelet
      volumes:
      - name: kubelet-config
        hostPath:
          path: /etc/kubernetes/kubelet
